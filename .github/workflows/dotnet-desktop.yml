name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Path: PBManager.sln
      Wap_Project_Path: PBManager.Package/PBManager.Package.wapproj
      Wap_Project_Directory: PBManager.Package

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore NuGet packages
      run: dotnet restore "${{ env.Solution_Path }}"

    - name: Build Solution with MSBuild
      run: msbuild "${{ env.Solution_Path }}" /p:Configuration=${{ matrix.configuration }}

    - name: Decode the PFX certificate
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath "GitHubActionsWorkflow.pfx"
        [IO.File]::WriteAllBytes($certificatePath, $pfx_cert_byte)
      shell: pwsh

    - name: Create MSIX App Package
      run: msbuild "${{ env.Wap_Project_Path }}" /p:Configuration=${{ matrix.configuration }} /p:UapAppxPackageBuildMode=StoreUpload /p:AppxBundle=Always /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword="${{ secrets.Pfx_Key }}"
      env:
        Appx_Bundle_Platforms: x86|x64

    - name: Remove the PFX certificate
      if: always() # This step runs even if the packaging step fails
      run: Remove-Item -Path (Join-Path $env:Wap_Project_Directory "GitHubActionsWorkflow.pfx") -ErrorAction SilentlyContinue
      shell: pwsh

    - name: Upload MSIX Package Artifact
      uses: actions/upload-artifact@v4
      with:
        name: MSIX-Package-${{ matrix.configuration }}
        path: ${{ env.Wap_Project_Directory }}/AppPackages/