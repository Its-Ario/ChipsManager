name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Path: PBManager.sln
      Wap_Project_Path: PBManager.Package/PBManager.Package.wapproj
      Wap_Project_Directory: PBManager.Package

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore NuGet packages with MSBuild
      run: msbuild "${{ env.Solution_Path }}" /t:Restore /p:Configuration=${{ matrix.configuration }} /p:Platform=x86

    - name: Build Solution with MSBuild
      run: msbuild "${{ env.Solution_Path }}" /p:Configuration=${{ matrix.configuration }} /p:Platform=x86

    - name: Decode the PFX certificate
      id: decode_cert
      shell: pwsh
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
        # Use a temporary path for the certificate file
        $pfxPath = Join-Path -Path $env:TEMP -ChildPath "signing_cert.pfx"
        [System.IO.File]::WriteAllBytes($pfxPath, $pfx_cert_byte)
        # Output the path for the next step to use
        echo "pfx_path=$pfxPath" >> $env:GITHUB_OUTPUT
        
    - name: Create MSIX App Package
      shell: pwsh
      run: >
        msbuild "${{ env.Wap_Project_Path }}"
        /p:Configuration=${{ matrix.configuration }}
        /p:Platform=x86
        /p:AppxPackageSigningEnabled=true
        /p:PackageCertificateKeyFile="${{ steps.decode_cert.outputs.pfx_path }}"
        /p:PackageCertificatePassword="${{ secrets.PFX_KEY }}"
        /p:AppxPackageDir="${{ env.Wap_Project_Directory }}/AppPackages/"
        /p:UapAppxPackageBuildMode=StoreUpload
        /p:AppxBundle=Always
        /p:AppxBundlePlatforms="x86|x64"

    - name: Upload MSIX Package Artifact
      uses: actions/upload-artifact@v4
      with:
        name: MSIX-Package-${{ matrix.configuration }}
        path: ${{ env.Wap_Project_Directory }}/AppPackages/